
	<div id="main">
		<div id="warning"><h1>Dive Profiler Prototype</h1></div>
		<div id="belowtop">
			<div id="leftmenu">
				<script type="text/x-handlebars" data-template-name="divestuff">
					<div class="form-group">
						<Label for="Depth">Depth</Label>
						{{input
							type="text"
							id="Depth"
							class="form-control"
							placeholder="Enter a Depth(feet)"
							value=Depth
							valueBinding="dive.depth"
						}}
						<!--<input type="text" class="form-control" id="Depth" placeholder="Enter a Depth(feet)"/>-->
					</div>
					<div class="form-group">
						<Label for="Time">Time</Label>
						{{input
							type="text"
							id="Time"
							class="form-control"
							placeholder="Enter a Time(minutes)"
							value=Time
							valueBinding="dive.time"
						}}						
						<!--<input type="text" class="form-control" id="Time" placeholder="Enter time at depth(minutes)"/>-->
		<!--			</div>
					<button type="button" class="btn btn-default" {{action submitAction target="controller"}}>Submit</button>
					  <p>{{dive.depth}} - {{dive.time}}</p>
				</script>
				
				<form id="outwater">
					<div class="form-group">
						<Label for="Land">Time on Land</Label>
						<input type="text" class="form-control" id="Land" placeholder="Enter time out of water"/>
					</div>
					<button type="button" class="btn btn-default" onclick="addrest()">Submit</button>
				</form>

			</div>
			<div id="map">
				<svg id="visualisation" width="700" height="400"></svg>
            <script>
			
                function InitChart() {

                    var vis = d3.select("#visualisation"),
                        WIDTH = 700,
                        HEIGHT = 400,
                        MARGINS = {
                            top: 20,
                            right: 20,
                            bottom: 20,
                            left: 50
                        },
                        xScale = d3.scale.linear().range([MARGINS.left, WIDTH - MARGINS.right]).domain([0, 180]),
                        yScale = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([150, 0]),
                        xAxis = d3.svg.axis()
                        .scale(xScale),
                        yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("left");
                    
                    vis.append("svg:g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
                        .call(xAxis);
                    vis.append("svg:g")
                        .attr("class", "y axis")
                        .attr("transform", "translate(" + (MARGINS.left) + ",0)")
                        .call(yAxis);
                    var lineGen = d3.svg.line()
                        .x(function(d) {
                            return xScale(d[0]);
                        })
                        .y(function(d) {
                            return yScale(d[1]);
                        })
                    vis.append('svg:path')
                        .attr('d', lineGen(data))
                        .attr('stroke', 'green')
                        .attr('stroke-width', 2)
                        .attr('fill', 'none');
                }
                InitChart();
            </script>				
			</div>
		</div>
		<div id="info">
		</div>
	</div>	-->
	
	App.IndexRoute = Ember.Route.extend({
  dive: function(){
      return App.Diving.create();
  },
    setupController : function(controller, dive){
        controller.set("model", dive);
    }
});


/*App.ClickableView = Ember.View.extend({
  click: function(evt) {
	
  }
});*/


App = Ember.Application.create();

App.Diving = Ember.Object.extend({
    Depth : "",
    Time : ""
});


App.SplashView = Ember.View.extend({       
    toggle: function(){
        Ember.$("#splash").hide();
		Ember.$("#main").show();
    }
});

App.IndexController = Ember.ObjectController.extend({
    submitAction : function(){
        // here you could perform your actions like persisting to the server or so
        alert("now we can submit the model:" + this.get("model"));
    }
});
